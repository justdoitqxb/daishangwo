package com.dsw.interceptor;

import java.io.IOException;
import java.sql.SQLException;
import com.opensymphony.xwork2.ActionInvocation;
import com.opensymphony.xwork2.interceptor.AbstractInterceptor;
import com.dsw.exception.ServiceException;

public class ServiceInterceptor extends AbstractInterceptor {
	private static final long serialVersionUID = 1000L;

	@Override
    public String intercept(ActionInvocation invocation) throws Exception {
       System.out.println("ServiceInterceptor intercept() invoked! ");
       before(invocation);
       String result = "";
       try {
           result = invocation.invoke();
       } catch (NullPointerException ex) {
           throw new ServiceException("调用了未经初始化的对象或者是不存在的对象！");
       } catch (IOException ex) {
           throw new ServiceException("IO异常！");
       } catch (ClassNotFoundException ex) {
           throw new ServiceException("指定的类不存在！");
       } catch (ArithmeticException ex) {
           throw new ServiceException("数学运算异常！");
       } catch (ArrayIndexOutOfBoundsException ex) {
           throw new ServiceException("数组下标越界!");
       } catch (IllegalArgumentException ex) {
           throw new ServiceException("方法的参数错误！");
       } catch (ClassCastException ex) {
           throw new ServiceException("类型强制转换错误！");
       } catch (SecurityException ex) {
           throw new ServiceException("违背安全原则异常！");
       } catch (SQLException ex) {
           throw new ServiceException("操作数据库异常！");
       } catch (NoSuchMethodError ex) {
           throw new ServiceException("方法末找到异常！");
       } catch (InternalError ex) {
           throw new ServiceException("Java虚拟机发生了内部错误");
       } catch (Exception ex) {
           throw new ServiceException("程序内部错误，操作失败！");
       }
       after(invocation, result);
       return "login";
    }
    /**
     * 验证登陆等...
     * @param invocation
     * @return
     * @throws Exception
     */
    public void before(ActionInvocation invocation) throws Exception {
       //...
    }

    /**
     * 记录日志等..
     * @param invocation
     * @return
     * @throws Exception
     */
    public void after(ActionInvocation invocation,String result) throws Exception{
       //...
    }  
}
